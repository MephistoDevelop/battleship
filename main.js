!function(e){var i={};function s(r){if(i[r])return i[r].exports;var t=i[r]={i:r,l:!1,exports:{}};return e[r].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.m=e,s.c=i,s.d=function(e,i,r){s.o(e,i)||Object.defineProperty(e,i,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,i){if(1&i&&(e=s(e)),8&i)return e;if(4&i&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&i&&"string"!=typeof e)for(var t in e)s.d(r,t,function(i){return e[i]}.bind(null,t));return r},s.n=function(e){var i=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(i,"a",i),i},s.o=function(e,i){return Object.prototype.hasOwnProperty.call(e,i)},s.p="",s(s.s=0)}([function(e,i,s){"use strict";s.r(i);var r=(e,i)=>({Name:i,Lengths:e,ships:{},fill_ship:e=>{const i=[];for(let s=0;s<e;s+=1)i.push("O");return i},hit:(e,i,s)=>{const r=e[s];return r[i]="X",r},isSunk:e=>{let i=!1;for(let s=0;s<e.length;s+=1){if("X"!==e[s]){i=!1;break}i=!0}return i}});var t=()=>({drawBoardPlayer:()=>{const e=[];for(let i=0;i<10;i+=1){const i=[];for(let e=0;e<10;e+=1)i[e]="-";e.push(i)}return e},placeShip:(e,i,s,r,t=!1)=>{const n=e,l=i;if(n.Name){const e=e=>{let i=!1;for(let t=0;t<n.Lengths;t+=1){if("-"!==e[r][s+t]){i=!1;break}i=!0}return i};if(s+n.Lengths<=10&&e(l))for(let e=0;e<n.Lengths;e+=1)l[r][s+e]=`${n.Name}${e}`;else console.log("place your ship in a valid position")}return`X: ${r} - Y: ${s}, ${JSON.stringify(l)} `},receiveAtack:(e,i,s,r)=>{const t=r;let n="";const l=t.ships,o="-"===s[i][e];if(o)s[i][e]="X",n="Failed on:  X: "+e+" Y: "+i+"Empty Cell? :"+o;else{const r=s[i][e].split(""),a=r.splice(0,r.length-1).join(""),p=parseInt(r);t.hit(l,p,a),s[i][e]=`${a}X`,n=`${JSON.stringify(l)}- ${a} - ${p} \n Atacked on Pos; X: ${e}:   Y: ${i}:    Empty Cell ? : ${o}    \n BoardArr:  ${s}`}return n},checkShipsSunked:e=>{let i=!1;const s=e,r=s.ships.Cruiser,t=s.ships.Submarine,n=s.ships.Destroyer,l=s.ships.Carrier,o=s.ships.Battleship;return s.isSunk(r)&&s.isSunk(t)&&s.isSunk(l)&&s.isSunk(n)&&s.isSunk(o)&&(i=!0),i}});var n=e=>({Name:e,Turn:0,playerBoard:{name:e,Board:[]},computerBoard:{Board:[]},playerInit:()=>{const e=r(5,"Carrier"),i=r(4,"Battleship"),s=r(3,"Cruiser"),t=r(3,"Submarine"),n=r(2,"Destroyer"),l=(e.ships,e.fill_ship(e.Lengths)),o=i.fill_ship(i.Lengths),a=s.fill_ship(s.Lengths),p=t.fill_ship(t.Lengths),c=n.fill_ship(n.Lengths);return e.ships[e.Name]=l,e.ships[i.Name]=o,e.ships[s.Name]=a,e.ships[t.Name]=p,e.ships[n.Name]=c,console.log(`Soy PLayer Init function: ${JSON.stringify(e.ships)}`),e.ships},computerInit:()=>{const e=r(5,"Carrier"),i=r(4,"Battleship"),s=r(3,"Cruiser"),t=r(3,"Submarine"),n=r(2,"Destroyer"),l=(e.ships,e.fill_ship(e.Lengths)),o=i.fill_ship(i.Lengths),a=s.fill_ship(s.Lengths),p=t.fill_ship(t.Lengths),c=n.fill_ship(n.Lengths);return e.ships[e.Name]=l,e.ships[i.Name]=o,e.ships[s.Name]=a,e.ships[t.Name]=p,e.ships[n.Name]=c,console.log(`Soy Computer Init function: ${JSON.stringify(e.ships)}`),e.ships},fillPlayerMoves:e=>{for(let i=0;i<100;i+=1)e[i]=i+1;return e},fillComputerMoves:e=>{for(let i=0;i<100;i+=1)e[i]=i+1;return e}});(()=>{const e=r(5,"Carrier"),i=r(4,"Battleship"),s=r(3,"Cruiser"),l=r(3,"Submarine"),o=r(2,"Destroyer"),a=r(5,"Carrier"),p=r(4,"Battleship"),c=r(3,"Cruiser"),h=r(3,"Submarine"),u=r(2,"Destroyer");e.ships,a.ships;const f=e.fill_ship(e.Lengths),g=i.fill_ship(i.Lengths),m=s.fill_ship(s.Lengths),y=l.fill_ship(l.Lengths),v=o.fill_ship(o.Lengths),k=(a.fill_ship(a.Lengths),p.fill_ship(p.Lengths)),S=c.fill_ship(c.Lengths),d=h.fill_ship(h.Lengths),N=u.fill_ship(u.Lengths);e.ships[e.Name]=f,e.ships[i.Name]=g,e.ships[s.Name]=m,e.ships[l.Name]=y,e.ships[o.Name]=v,a.ships[a.Name]=f,a.ships[p.Name]=k,a.ships[c.Name]=S,a.ships[h.Name]=d,a.ships[u.Name]=N,JSON.stringify(e.ships);const _=t();let L=_.drawBoardPlayer();t().drawBoardPlayer();_.placeShip(l,L,0,2,!0),_.placeShip(i,L,3,2,!0),_.placeShip(s,L,3,0,!0),_.placeShip(o,L,6,7,!0),_.placeShip(e,L,5,8,!0),_.receiveAtack(3,0,L,e),_.receiveAtack(4,0,L,e),_.receiveAtack(5,0,L,e),_.receiveAtack(0,2,L,e),_.receiveAtack(1,2,L,e),_.receiveAtack(2,2,L,e),_.receiveAtack(3,2,L,e),_.receiveAtack(4,2,L,e),_.receiveAtack(5,2,L,e),_.receiveAtack(6,2,L,e),_.receiveAtack(6,7,L,e),_.receiveAtack(7,7,L,e),_.receiveAtack(5,8,L,e),_.receiveAtack(6,8,L,e),_.receiveAtack(7,8,L,e),_.receiveAtack(8,8,L,e),_.receiveAtack(9,8,L,e),_.receiveAtack(0,1,L,e),_.receiveAtack(5,4,L,e),_.receiveAtack(7,5,L,e),console.log("Board Array: "+L),console.log("Check Sunked Ships or Not:  "+_.checkShipsSunked(e));const A=n("MephistoDevelop"),b=A.fillPlayerMoves([]);console.log("Soy: "+A.Name+"\n"+b),console.log(A.playerInit()),console.log(A.computerInit())})()}]);